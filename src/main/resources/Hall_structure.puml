@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.redis.bookingsystem.models.Hall",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_108389755 { 
   	label=redis
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_224165739 { 
   	label=bookingsystem
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Hall1339996560[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Hall</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   hallName: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   schedules: List&lt;Schedule&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   seats: List&lt;Seat&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># canEqual(other: Object): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Movie1339996560[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Movie</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   id: Long [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   schedules: List&lt;Schedule&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   yearOfRelease: Integer [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># canEqual(other: Object): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Order1339996560[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Order</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   id: long [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   reservation: List&lt;Reservation&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user: User [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># canEqual(other: Object): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Reservation1339996560[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Reservation</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   order: Order [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   reservationNumber: long [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   schedule: Schedule [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   seatList: List&lt;Seat&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   user_reservation: long [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># canEqual(other: Object): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Schedule1339996560[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Schedule</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   hall: Hall [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: Long [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   movie: Movie [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   playingTime: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   reservation: List&lt;Reservation&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># canEqual(other: Object): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Seat1339996560[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Seat</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   hall: Hall [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: Long [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   reservation: Reservation [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   seatNumber: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># canEqual(other: Object): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

User1339996560[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)User</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   age: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: Long [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   orders: List&lt;Order&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   username: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># canEqual(other: Object): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
Hall1339996560 -> Schedule1339996560[label="schedules
[0..*]"];
Hall1339996560 -> Seat1339996560[label="seats
[0..*]"];
Movie1339996560 -> Schedule1339996560[label="schedules
[0..*]"];
Order1339996560 -> Reservation1339996560[label="reservation
[0..*]"];
Order1339996560 -> User1339996560[label="user
[0..1]"];
Reservation1339996560 -> Order1339996560[label="order
[0..1]"];
Reservation1339996560 -> Schedule1339996560[label="schedule
[0..1]"];
Reservation1339996560 -> Seat1339996560[label="seatList
[0..*]"];
Schedule1339996560 -> Hall1339996560[label="hall
[0..1]"];
Schedule1339996560 -> Movie1339996560[label="movie
[0..1]"];
Schedule1339996560 -> Reservation1339996560[label="reservation
[0..*]"];
Seat1339996560 -> Hall1339996560[label="hall
[0..1]"];
Seat1339996560 -> Reservation1339996560[label="reservation
[0..1]"];
User1339996560 -> Order1339996560[label="orders
[0..*]"];
    
}
@enduml